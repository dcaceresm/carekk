extends layout

block customtitle
    title CareKK Mesa #{id}
block content
    .header
        h1 Mesa #{id}
        .players
            a(href="/reglas" target="_blank") 📚 Reglas
            .buttons                
            span   Jugando como 
                span#playerName
                span   |  
            span(style="font-weight:bold;") Jugadores:
            ul#playerList
    h2.won#won
    h2#globalMessage
    

    .container.pattern2.prop--border-radius--5px
        .gameContainer
            .row
                .col-3
                    h3 Mesas Oponentes
                    .tables
                        .otherTables
                            //- .playerTriplet
                            //-     p Player 1:
                            //-     p 
                            //-         span.miniCard J ♥️
                            //-         span.miniCard A ♥️
                            //-         span.miniCard 3 ♥️
                            //-         span                                     
                            //-         span.miniHidden ¿ ?
                            //-         span  x
                            //-         span 3
                            //-     p Mano: 
                            //-         span.gotHand  Sí                            
                                
                .col-6
                    .gmwContainer
                        .gameWindow
                            .cardPiles
                                .cardBorder
                                    .cardPile.pattern12#mainDeck
                                        span#mainDeckCount
                                .cardBorder                            
                                    .cardPile#discardPile                                                        
                                        #topCard 
                                            p &nbsp;   
                                        button(onClick="drawDiscard()" active="true") Llevarse las Cartas      
                                .cardBorder                            
                                    .cardPile#burntPile  
                                        #burntCard 
                                            p &nbsp;      
                .col-3.height--380--imp
                    h3 Chat
                    .tables
                        ul#messages
                    form.chatInput#messagesForm
                        input(type="text").chatText
                        button.gameButton(type="submit") Enviar a tod@s
            .row
                .triplet-container
                    .tripletOwner#currPlayer                         
                    .triplets
                        .triplet#vTriplet
                        // no hagai trampa, hueón sapo >:(
                        // igual no se puede jijiji    
                        .triplet#hTriplet
            h3.warning#warning
            h3.canPlay#canPlay
            .playerHand
                h3 Mi mano es:
                #hand



    script(src="/socket.io/socket.io.js")
    script.
        var socket = io('http://localhost:3000');
        var suits = {
                'T': '♣️',
                'P': '♠️',
                'C': '♥️',
                'D': '♦️',
            }
        numbers = {
            11 : 'J',
            12 : 'Q',
            13 : 'K',
            14 : 'A' 
        }

        $('#messagesForm').submit(event => {
            event.preventDefault()
            const msg = $( "input" ).first().val()
            if(msg!==""){
                $( "input" ).first().val("")
                socket.emit('chatMsg', {msg: msg})
            }
        })

        socket.on('chatBroadcast', (data) => {
            $('#messages').append('<li><span style="font-weight:bold;color:'+(data.color||"black")+';">'+data.user+'</span> dice: '+data.message+'</li>')
        })
        socket.on('news', function (data) {
            socket.emit('roomConnection', { room: '#{id}' });
        });

        socket.on('idxredir', (data)=>{
            if(data){
                if(data.alert) alert(data.alert)
            }
            window.location.replace('/')
        })

        socket.on('generatePlayerTable', (data)=>{
            if(data.playerID !== socket.id){
                if(!Object.keys($('#'+data.playerID+"pt")).length){
                    $('.otherTables').append('<div class="playerTriplet" id="'+data.playerID+'pt"><p>'+data.playerName+'</p><p class="spans"></p><p class="handp"></p></div>')
                }
                
            }
        })

        socket.on('updatePlayerTable', (data)=>{                        
            if(data.playerID !== socket.id){
                console.log("updating data")
                if(data.currentVTriplet && typeof(data.currentHTriplet)!=="undefined"){
                    console.log("updating data")
                    let cards = $('#'+data.playerID+"pt").find(".spans")
                    cards.empty()
                    data.currentVTriplet.map( vtt => {
                        cards.append('<span class="miniCard">'+(numbers[vtt[0]+2] || vtt[0]+2)+" "+suits[vtt[1]]+'</span>')
                    })
                    cards.append('<span>   </span>')
                    cards.append('<span class="miniHidden">¿ ?</span>')
                    cards.append('<span>x</span>')
                    cards.append('<span>'+data.currentHTriplet+'</span>')
                }
                if(typeof(data.currentHand)!=="undefined"){
                    let gotHand = $('#'+data.playerID+"pt").find(".handp")
                    gotHand.empty()
                    gotHand.append('<span>Mano: '+(data.currentHand ? "Sí" : "No")+'</span>')
                }
            }
        })


        socket.on('updateGameData', (data) => {
            if(data.cardCount){
                $('#mainDeckCount').empty()    
                $('#mainDeckCount').text(data.cardCount)    
            }
            if(data.burntCard){
                $('#burntCard').empty()
                if(data.burntCard[1]!=="")
                    $('#burntCard').append("<p>"+(numbers[data.burntCard[0]+2] || data.burntCard[0]+2)+" "+suits[data.burntCard[1]]+"</p>");
            }
            if(data.topCard){
                $('#topCard').empty()
                if(data.topCard[0]!=="" && data.topCard[1]!=="")    
                    $('#topCard').append("<p>"+(numbers[data.topCard[0]+2] || data.topCard[0]+2)+" "+suits[data.topCard[1]]+"</p>");
            }
        })

        socket.on('updatePlayerData', (data) => {
            if(data.currentHand){
                $('#hand').empty()
                $('#warning').empty()  
                data.currentHand.map(c => {
                    $('#hand').append('<button class="playableCard" onClick="playCard(this)" v="'+c[0]+'" sym="'+c[1]+'">'+(numbers[c[0]+2] || c[0]+2)+" <b>"+suits[c[1]]+"</b></button>")
                })
            }


            if(data.currentHTriplet){
                $('#hTriplet').empty()
                $('#warning').empty()  
                data.currentHTriplet.map(c => {
                    $('#hTriplet').append('<button class="playableHiddenCard" onClick="playFromHTriplet(this)" v="'+c[0]+'" sym="'+c[1]+'"> ¿? <b></b></button>')
                })
            }

            if(data.currentVTriplet){
                $('#vTriplet').empty()
                $('#warning').empty()                
                data.currentVTriplet.map(c => {
                    $('#vTriplet').append('<button class="playableCard" onClick="playFromVTriplet(this)" v="'+c[0]+'" sym="'+c[1]+'">'+(numbers[c[0]+2] || c[0]+2)+" <b>"+suits[c[1]]+"</b></button>")
                })
            }


            if(data.warning){
                $('#warning').empty();
                $('#warning').text(data.warning)
            }

            if(data.canPlay){
                $('#canPlay').empty()   
                $('#canPlay').text(data.canPlay+"es tu turno ")   
            }
        })

        socket.on('playerData', (data) => {
            $('#playerName').text(data.name)
            $('#currPlayer').text("Mesa de "+data.name)
        })

        socket.on('playerList', (data) => {
            $('#playerList').empty()
            data.players.map(name => $('#playerList').append('<li class="playerItem">'+name+'</li>') )            
        })

        socket.on('won', () => {
            $('#canPlay').empty()
            $('#warning').empty();
            $('#won').text("Ganaste! Quédate para conocer al carecaca");
        })

        socket.on('initButton', () => {
            $('.buttons').append('<button class="gameButton" id="initGameButton" onclick="initGame()">Iniciar Juego</button>')            
        })

        socket.on('globalMessage', (data) => {
            $('#globalMessage').empty();
            $('#globalMessage').append(data.message)
        })
        socket.on('endGame', (data) => {
            $('#globalMessage').empty();
            $('#globalMessage').append("El nuevo carecaca es: "+data.loser+".")
            for(let i = 5; i<10; i++){
                setTimeout(() => {
                    $('#globalMessage').empty();
                    $('#globalMessage').append("Se te redirigirá al inicio en "+(10-i)+" segundos.")
                }, i*1000)
            }
            setTimeout( () => window.location.replace('/'), 10000)
        })



    script.

        
        const initGame = () => {
            socket.emit('startGame',{initPlayer: $('#playerName').text()})
            $('.buttons').empty()

        }


        const drawDiscard = () => {
            socket.emit('drawDiscard')
        }

        const playCard = (event) => {            
            let tuple = [parseInt(event.attributes.v.value), event.attributes.sym.value]
            socket.emit('playCard', {card : tuple})
        }


        const playFromHTriplet = (event) => {
            let tuple = [parseInt(event.attributes.v.value), event.attributes.sym.value]
            socket.emit('playHT', {card : tuple})
        }
        const playFromVTriplet = (event) => {
            let tuple = [parseInt(event.attributes.v.value), event.attributes.sym.value]
            socket.emit('playVT', {card : tuple})
        }