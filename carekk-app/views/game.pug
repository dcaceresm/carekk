extends layout

block content
    .header
        h1 Sala #{id}    
        p Jugando como 
            span#playerName
    .row
        span(style="font-weight:bold;") Jugadores:
        ul#playerList

    .buttons
        if initButton
            button.gameButton#initGameButton(onClick="initGame()" active="true") Iniciar Juego

    .container.pattern2.prop--border-radius--5px
        .gameContainer
            .gameWindow
                .cardPiles
                    .cardBorder
                        .cardPile.pattern12#mainDeck
                            span#mainDeckCount
                    .cardBorder                            
                        .cardPile#discardPile                                                        
                            #topCard &nbsp;   
                            button(onClick="drawDiscard()" active="true") Llevarse las Cartas      
            .currentPlayer
            .warning#warning
            .canPlay#canPlay
            .triplets
            .playerHand
                p Mi mano es:
                #hand



    script(src="/socket.io/socket.io.js")
    script.
        var socket = io('http://localhost:3000');
        var suits = {
                'T': '♣️',
                'P': '♠️',
                'C': '♥️',
                'D': '♦️',
            }
        numbers = {
            11 : 'J',
            12 : 'Q',
            13 : 'K',
            14 : 'A' 
        }
        socket.on('news', function (data) {
            socket.emit('roomConnection', { room: '#{id}' });
        });


        socket.on('updateGameData', (data) => {
            if(data.cardCount){
                $('#mainDeckCount').empty()    
                $('#mainDeckCount').text(data.cardCount)    
            }
            if(data.discardCount){

            }
            if(data.topCard){
                $('#topCard').empty()
                if(data.topCard[0]!=="" && data.topCard[1]!=="")    
                    $('#topCard').text((numbers[data.topCard[0]+2] || data.topCard[0]+2)+" "+suits[data.topCard[1]]);
            }
        })

        socket.on('updatePlayerData', (data) => {
            if(data.currentHand){
                $('#hand').empty()
                $('#warning').empty()
                //$('#hand').text(data.currentHand)    
                data.currentHand.map(c => {
                    $('#hand').append('<button class="playableCard" onClick="playCard(this)" v="'+c[0]+'" sym="'+c[1]+'">'+(numbers[c[0]+2] || c[0]+2)+" <b>"+suits[c[1]]+"</b></button>")
                })
            }
            if(data.warning){
                $('#warning').empty();
                $('#warning').text(data.warning)
            }

            if(data.canPlay){
                $('#canPlay').empty()   
                $('#canPlay').text(data.canPlay+"es tu turno ")   
            }
        })

        socket.on('playerData', (data) => {
            $('#playerName').text(data.name)
        })

        socket.on('playerList', (data) => {
            $('#playerList').empty()
            data.players.map(name => $('#playerList').append('<li class="playerItem">'+name+'</li>') )            
        })



    script.
        const initGame = () => {
            socket.emit('startGame',{initPlayer: $('#playerName').text()})
            $('#initGameButton').prop('disabled', true);

        }


        const drawDiscard = () => {
            socket.emit('drawDiscard')
        }

        const playCard = (event) => {            
            let tuple = [parseInt(event.attributes.v.value), event.attributes.sym.value]
            socket.emit('playCard', {card : tuple})
        }
